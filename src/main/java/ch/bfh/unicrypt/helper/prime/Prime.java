/*
 * UniCrypt
 *
 *  UniCrypt(tm): Cryptographical framework allowing the implementation of cryptographic protocols e.g. e-voting
 *  Copyright (c) 2016 Bern University of Applied Sciences (BFH), Research Institute for
 *  Security in the Information Society (RISIS), E-Voting Group (EVG)
 *  Quellgasse 21, CH-2501 Biel, Switzerland
 *
 *  Licensed under Dual License consisting of:
 *  1. GNU Affero General Public License (AGPL) v3
 *  and
 *  2. Commercial license
 *
 *
 *  1. This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *  2. Licensees holding valid commercial licenses for UniCrypt may use this file in
 *   accordance with the commercial license agreement provided with the
 *   Software or, alternatively, in accordance with the terms contained in
 *   a written agreement between you and Bern University of Applied Sciences (BFH), Research Institute for
 *   Security in the Information Society (RISIS), E-Voting Group (EVG)
 *   Quellgasse 21, CH-2501 Biel, Switzerland.
 *
 *
 *   For further information contact <e-mail: unicrypt@bfh.ch>
 *
 *
 * Redistributions of files must retain the above copyright notice.
 */
package ch.bfh.unicrypt.helper.prime;

import ch.bfh.unicrypt.helper.cache.Cache2D;
import ch.bfh.unicrypt.helper.math.MathUtil;
import ch.bfh.unicrypt.helper.random.RandomByteSequence;
import ch.bfh.unicrypt.helper.random.hybrid.HybridRandomByteSequence;
import ch.bfh.unicrypt.math.algebra.multiplicative.classes.GStarModPrime;
import java.math.BigInteger;

/**
 * Each instance of this class represents a prime number. This class is a specialization of {@link SpecialFactorization}
 * for the borderline case of a single prime factor {@code p} with exponent {@code 0}.
 * <p>
 * @see SpecialFactorization
 * @author R. Haenni
 * @version 2.0
 */
public class Prime
	   extends SpecialFactorization {

	private static final long serialVersionUID = 1L;

	// maps of smallest and largest prime numbers for common bit lenghts
	private static final Cache2D<Integer, BigInteger, Prime> CACHE1 = new Cache2D<>();
	private static final Cache2D<Integer, BigInteger, Prime> CACHE2 = new Cache2D<>();

	static {
		Prime.CACHE1.put(128, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000001D", 16)));
		Prime.CACHE1.put(160, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(192, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000005", 16)));
		Prime.CACHE1.put(224, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE1.put(256, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE1.put(384, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000171", 16)));
		Prime.CACHE1.put(512, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F", 16)));
		Prime.CACHE1.put(768, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002BB", 16)));
		Prime.CACHE1.put(1024, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000483", 16)));
		Prime.CACHE1.put(2048, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE1.put(3072, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE1.put(4096, MathUtil.TWO, new Prime(new BigInteger

		Prime.CACHE2.put(128, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF61", 16)));
		Prime.CACHE2.put(160, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE2.put(192, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF13", 16)));
		Prime.CACHE2.put(224, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE2.put(256, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));
		Prime.CACHE2.put(384, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC3", 16)));
		Prime.CACHE2.put(512, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7", 16)));
		Prime.CACHE2.put(768, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC7", 16)));
		Prime.CACHE2.put(1024, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97", 16)));
		Prime.CACHE2.put(2048, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE2.put(3072, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE2.put(4096, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60B", 16)));

		Prime.CACHE1.put(1024, new BigInteger("800000000000000000000000000000000000012B", 16), new Prime(new BigInteger("80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFAEC41EFA48B2E00000000000012B01", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(1024, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16), new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002C5FFFFFFFFFFFFFFFEBEC11D0F7FFFFFFFFFFF7DA7", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE1.put(2048, new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE1.put(2048, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE1.put(3072, new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE1.put(3072, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));

		Prime.CACHE2.put(1024, new BigInteger("800000000000000000000000000000000000012B", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF7FFFFFFFFFF5D883DF49165BFFFFFFFFFFFFD9751", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE2.put(1024, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE07FFFFFFFFFFFFFFFD7D823A1F0000000000005C89", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE2.put(2048, new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE2.put(2048, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE2.put(3072, new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE2.put(3072, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));
	}

	// a prime factor of p-1
	private BigInteger orderFactor;

	// 2 is a special case (p-1 has no prime factor)
	protected Prime() {
		this(MathUtil.TWO, null);
	}

	// unknown order factor
	protected Prime(BigInteger prime) {
		this(prime, MathUtil.TWO);
	}

	// known order factor
	protected Prime(BigInteger prime, BigInteger orderFactor) {
		super(prime, new BigInteger[]{prime}, new Integer[]{1});
		this.orderFactor = orderFactor;
	}

	/**
	 * Checks if the prime number is a safe prime.
	 * <p>
	 * @return {@code true} if it is a safe prime, {@code false} otherwise
	 */
	public boolean isSafe() {
		return MathUtil.isSafePrime(this.value);
	}

	/**
	 * Returns the known prime factor of {@code p-1}, or {@code null} for {@code p=2}.
	 * <p>
	 * @return The prime factor
	 */
	public Prime getOrderFactor() {
		return Prime.getInstance(this.orderFactor);
	}

	/**
	 * Creates a new prime number from a given integer value of type {@code long}. This method is a convenience method
	 * for {@link Prime#getInstance(BigInteger)}. Throws an exception if the given integer is not prime.
	 * <p>
	 * @param prime The given integer value
	 * @return The new prime
	 */
	public static Prime getInstance(long prime) {
		return Prime.getInstance(BigInteger.valueOf(prime));
	}

	/**
	 * Creates a new prime number from a given integer value of type {@link BigInteger}. Throws an exception if the
	 * given integer is not prime.
	 * <p>
	 * @param prime The given integer value
	 * @return The new prime
	 */
	public static Prime getInstance(BigInteger prime) {
		if (prime == null || !MathUtil.isPrime(prime)) {
			throw new IllegalArgumentException();
		}
		return new Prime(prime);
	}

	/**
	 * Returns the smallest prime number of a given bit length.
	 * <p>
	 * @param bitLength The given bit length
	 * @return The new prime
	 */
	public static Prime getSmallestInstance(int bitLength) {
		if (bitLength < 2) {
			throw new IllegalArgumentException();
		}
		if (bitLength == 2) {
			return new Prime();
		}
		// bitLength > 2
		return Prime.getSmallestInstance(bitLength, MathUtil.TWO);
	}

	/**
	 * Returns the smallest prime number {@code p} of a given bit length such that {@code p-1} divides
	 * {@code orderFactor}. Such primes are required in {@link GStarModPrime#getInstance(Prime, Prime)}.
	 * <p>
	 * @param bitLength   The bit length of {@code p}
	 * @param orderFactor The prime factor of {@code p-1}
	 * @return The new prime
	 */
	public static Prime getSmallestInstance(int bitLength, BigInteger orderFactor) {
		if (bitLength == 2 && MathUtil.TWO.equals(orderFactor)) {
			return new Prime(MathUtil.THREE);
		}
		if (bitLength < 3 || orderFactor == null || !MathUtil.isPrime(orderFactor) || bitLength <= orderFactor.bitLength()) {
			throw new IllegalArgumentException();
		}
		Prime prime = CACHE1.get(bitLength, orderFactor);
		if (prime == null) {
			BigInteger candidate = MathUtil.powerOfTwo(bitLength - 1).add(MathUtil.ONE);
			BigInteger increase;
			if (orderFactor.equals(MathUtil.TWO)) {
				increase = MathUtil.TWO;
			} else {
				increase = orderFactor.shiftLeft(1);
				// the smallest possible value is 2*orderFactor+1
				candidate = candidate.max(increase.add(MathUtil.ONE));
				// compute the smallest possible candidate
				if (!candidate.mod(increase).equals(MathUtil.ONE)) {
					candidate = candidate.subtract(MathUtil.ONE).divide(increase).add(MathUtil.ONE).multiply(increase).add(MathUtil.ONE);
				}
			}
			while (!MathUtil.isPrime(candidate)) {
				candidate = candidate.add(increase);
				if (candidate.bitLength() > bitLength) {
					throw new IllegalArgumentException();
				}
			}
			prime = new Prime(candidate, orderFactor);
			CACHE1.put(bitLength, orderFactor, prime);
		}
		return prime;
	}

	/**
	 * Returns the largest prime number of a given bit length.
	 * <p>
	 * @param bitLength The given bit length
	 * @return The new prime
	 */
	public static Prime getLargestInstance(int bitLength) {
		if (bitLength < 2) {
			throw new IllegalArgumentException();
		}
		return Prime.getLargestInstance(bitLength, MathUtil.TWO);
	}

	/**
	 * Returns the largest prime number {@code p} of a given bit length such that {@code p-1} divides
	 * {@code orderFactor}. Such primes are required in {@link GStarModPrime#getInstance(Prime, Prime)}.
	 * <p>
	 * @param bitLength   The bit length of {@code p}
	 * @param orderFactor The prime factor of {@code p-1}
	 * @return The new prime
	 */
	public static Prime getLargestInstance(int bitLength, BigInteger orderFactor) {
		if (bitLength == 2 && MathUtil.TWO.equals(orderFactor)) {
			return new Prime(MathUtil.THREE);
		}
		if (bitLength < 3 || orderFactor == null || !MathUtil.isPrime(orderFactor) || bitLength <= orderFactor.bitLength()) {
			throw new IllegalArgumentException();
		}
		Prime prime = CACHE2.get(bitLength, orderFactor);
		if (prime == null) {
			BigInteger candidate = MathUtil.powerOfTwo(bitLength).subtract(MathUtil.ONE);
			BigInteger increase;
			if (orderFactor.equals(MathUtil.TWO)) {
				increase = MathUtil.TWO;
			} else {
				increase = orderFactor.shiftLeft(1);
				// compute the smallest possible candidate
				if (!candidate.mod(increase).equals(MathUtil.ONE)) {
					candidate = candidate.subtract(MathUtil.ONE).divide(increase).multiply(increase).add(MathUtil.ONE);
				}
			}
			while (!MathUtil.isPrime(candidate)) {
				candidate = candidate.subtract(increase);
				if (candidate.bitLength() < bitLength) {
					throw new IllegalArgumentException();
				}
			}
			prime = new Prime(candidate, orderFactor);
			CACHE2.put(bitLength, orderFactor, prime);
		}
		return prime;
	}

	/**
	 * Creates a new random prime number of a given bit length using the library's default random byte sequence.
	 * <p>
	 * @param bitLength The bit length
	 * @return The new prime
	 */
	public static Prime getRandomInstance(int bitLength) {
		return Prime.getRandomInstance(bitLength, HybridRandomByteSequence.getInstance());
	}

	/**
	 * Creates a new random prime number of a given bit length using a given random byte sequence.
	 * <p>
	 * @param bitLength          The bit length
	 * @param randomByteSequence The given source of randomness
	 * @return The new prime
	 */
	public static Prime getRandomInstance(int bitLength, RandomByteSequence randomByteSequence) {
		if (bitLength < 2 || randomByteSequence == null) {
			throw new IllegalArgumentException();
		}
		return new Prime(randomByteSequence.getRandomBigIntegerSequence(bitLength).find(value -> MathUtil.isPrime(value)));
	}

}
